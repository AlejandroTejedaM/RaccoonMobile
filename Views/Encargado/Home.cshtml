@{
    ViewData["Title"] = "Panel de Notificaciones";
}

<div class="container my-4">
    <h1 class="mb-3">Panel de Notificaciones</h1>
    <p>
        Aquí puede ver todas las notificaciones de fallos reportados. Puede revisar la descripción del problema, la
        ubicación del reporte, y el estado actual de cada uno.
    </p>

    <!-- Tabla de notificaciones -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Usuario</th>
                <th>Descripción</th>
                <th>Ubicación</th>
                <th>Fecha de Reporte</th>
                <th>Fecha de Resolución</th>
                <th>Tiempo Transcurrido</th> <!-- Modificado para incluir tiempo transcurrido -->
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="notificationsTable">
            <!-- Aquí se generarán las filas dinámicamente -->
        </tbody>
    </table>

    <!-- Modal para ver detalles de la notificación -->
    <div class="modal fade" id="notificationDetailsModal" tabindex="-1" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationTitle">Detalles del Reporte</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Usuario:</strong> <span id="modalUsuario"></span></p>
                    <p><strong>Descripción:</strong> <span id="modalDescripcion"></span></p>
                    <p><strong>Ubicación:</strong> <span id="modalUbicacion"></span></p>
                    <p><strong>Fecha de Reporte:</strong> <span id="modalFechaReporte"></span></p>
                    <p><strong>Fecha de Resolución:</strong> <span id="modalFechaResolucion"></span></p>
                    <p><strong>Tiempo Transcurrido:</strong> <span id="modalTiempoTranscurrido"></span></p>
                    <p><strong>Estado:</strong> <span id="modalEstado"></span></p>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/signalr.min.js"></script>
    <script>
        let fallosFiltrados = []; // Para almacenar los fallos filtrados
        const connection = new signalR.HubConnectionBuilder().withUrl("/notificacionesHub").build();

        // Iniciar conexión SignalR
        connection.start().then(() => {
            console.log("Conexión SignalR establecida");
        }).catch(err => console.error(err.toString()));

        // Escuchar el evento de nuevo fallo reportado
        connection.on("NuevoFalloReportado", () => {
            cargarFallos();
        });

        connection.on("FalloActualizado", () => {
            cargarFallos();
        });

        // Función para cargar fallos desde el controlador
        async function cargarFallos() {
            try {
                const response = await fetch('/fallas/GetFallos');
                const fallos = await response.json();

                const tableBody = document.getElementById('notificationsTable');
                tableBody.innerHTML = '';
                fallosFiltrados = fallos.filter(fallo => fallo.estado === 1);

                if (fallosFiltrados.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="7" class="text-center">No hay fallos finalizados.</td></tr>`;
                    return;
                }

                fallosFiltrados.forEach((fallo, index) => {
                    const ubicacion = `Lat: ${fallo.posicionLatitud.toFixed(6)}, Lon: ${fallo.posicionLongitud.toFixed(6)}`;
                    const fechaReporte = new Date(fallo.fechaReporte);
                    const fechaResolucion = fallo.fechaResolucion ? new Date(fallo.fechaResolucion) : null; // Mantener null si no hay resolución
                    const tiempoTranscurrido = calcularTiempoTranscurrido(fechaReporte, fechaResolucion); // Calcular tiempo transcurrido
                    const fechaReporteFormateada = `${fechaReporte.toLocaleDateString()} ${fechaReporte.toLocaleTimeString()}`;
                    const fechaResolucionFormateada = fechaResolucion ? `${fechaResolucion.toLocaleDateString()} ${fechaResolucion.toLocaleTimeString()}` : 'Pendiente';

                    const row = `
                                <tr>
                                    <td>${fallo.usuario}</td>
                                    <td>${fallo.descripcion}</td>
                                    <td>${ubicacion}</td>
                                    <td>${fechaReporteFormateada}</td>
                                    <td>${fechaResolucionFormateada}</td>
                                    <td>${tiempoTranscurrido}</td> <!-- Mostrar tiempo transcurrido -->
                                    <td>
                                        <button class="btn btn-info btn-sm" onclick="verDetalles(${index})">Ver Detalles</button>
                                    </td>
                                </tr>
                            `;
                    tableBody.innerHTML += row;
                });

            } catch (error) {
                console.error('Error al cargar los fallos:', error);
            }
        }

        // Función para calcular el tiempo transcurrido en días, horas, minutos y segundos
        function calcularTiempoTranscurrido(fechaReporte, fechaResolucion) {
            const fechaFin = fechaResolucion ? new Date(fechaResolucion) : new Date(); // Si hay fecha de resolución, usarla; de lo contrario, usar la fecha actual
            const diferencia = Math.floor((fechaFin - fechaReporte) / 1000); // Diferencia en segundos
            const dias = Math.floor(diferencia / (24 * 3600));
            const horas = Math.floor((diferencia % (24 * 3600)) / 3600);
            const minutos = Math.floor((diferencia % 3600) / 60);
            const segundos = diferencia % 60;

            return `${dias}d ${horas}h ${minutos}m ${segundos}s`;
        }

        // Función para ver los detalles del fallo en el modal
        // Función para ver los detalles del fallo en el modal
        function verDetalles(index) {
            const fallo = fallosFiltrados[index];
            const fechaReporte = new Date(fallo.fechaReporte);
            const fechaResolucion = fallo.fechaResolucion ? new Date(fallo.fechaResolucion) : null; // Mantener null si no hay resolución
            const tiempoTranscurrido = calcularTiempoTranscurrido(fechaReporte, fechaResolucion); // Calcular tiempo transcurrido

            document.getElementById('modalUsuario').textContent = fallo.usuario;
            document.getElementById('modalDescripcion').textContent = fallo.descripcion;
            document.getElementById('modalUbicacion').textContent = `Lat: ${fallo.posicionLatitud.toFixed(6)}, Lon: ${fallo.posicionLongitud.toFixed(6)}`;
            document.getElementById('modalFechaReporte').textContent = `${fechaReporte.toLocaleDateString()} ${fechaReporte.toLocaleTimeString()}`;
            document.getElementById('modalFechaResolucion').textContent = fechaResolucion ? `${fechaResolucion.toLocaleDateString()} ${fechaResolucion.toLocaleTimeString()}` : 'Pendiente';
            document.getElementById('modalTiempoTranscurrido').textContent = tiempoTranscurrido; // Mostrar tiempo transcurrido
            document.getElementById('modalEstado').textContent = fallo.estado === 1 ? 'Finalizado' : 'Pendiente'; // Mostrar estado

            $('#notificationDetailsModal').modal('show');
        }


        // Cargar fallos al cargar la página
        window.onload = cargarFallos();
    </script>
}
