@{
ViewData["Title"] = "Reporte de Fallo";
}

<div class="container my-4">
    <h1 class="mb-3">Reporte de Fallo en Línea</h1>
    <p>
        Bienvenido(a) a Raccoon Mobile y Asociados. Por favor, reporte cualquier problema con su línea a continuación.
    </p>

    <div class="row">
        <div class="col-8">
            <div class="alert alert-info" role="alert">
                <strong>Ubicación:</strong> <span id="location-status">Detectando ubicación...</span>
            </div>
        </div>
        <div id="UbicacionOriginal" class="col-4">
            <button class="btn btn-primary" onclick="updateMap(originalLocation)">Restaurar Ubicación</button>
        </div>
    </div>    
    <div id="map" style="width: 100%; height: 400px; margin-bottom: 20px;"></div>

    <form id="falloForm">
        <div class="mb-3">
            <label for="usuario" class="form-label">Nombre de Usuario</label>
            <input type="text" class="form-control" id="usuario" required>
        </div>
        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción del Problema</label>
            <textarea class="form-control" id="descripcion" rows="3" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Enviar Reporte</button>
    </form>

    <div id="responseMessage" class="mt-3"></div>
</div>

@section Scripts {
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="js/signalr.min.js"></script>
<script>
    let map, marker, userLocation;
    let originalLocation = {};

    function initMap() {
        map = L.map('map').setView([0, 0], 2);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);
    }

    function detectLocation() {
        return new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(
                position => {
                    userLocation = {
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    };
                    resolve(userLocation);
                },
                error => {
                    reject(error);
                }
            );
        });
    }
    function updateMap(location) {
        map.setView([location.latitude, location.longitude], 13);
        if (marker) {
            marker.setLatLng([location.latitude, location.longitude]);
            document.getElementById('location-status').textContent = 'Ubicación actualizada en ' + location.latitude + ', ' + location.longitude;
        } else {
            marker = L.marker([location.latitude, location.longitude]).addTo(map);
            document.getElementById('location-status').textContent = 'Ubicación detectada en ' + location.latitude + ', ' + location.longitude;
        }
    }

    async function setupPage() {
        initMap();
        try {
            const location = await detectLocation();
            originalLocation = location
            updateMap(location);
            document.getElementById('location-status').textContent = 'Ubicación detectada correctamente en ' + location.latitude + ', ' + location.longitude;
        } catch (error) {
            document.getElementById('location-status').textContent = 'No se pudo detectar la ubicación. Por favor, active la geolocalización.';
        }
    }
    setupPage();
    // Configuración de SignalR
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificacionesHub")
        .build();
    
    connection.start().catch(err => console.error(err.toString()));

    // Manejo del formulario
    document.getElementById('falloForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const usuario = document.getElementById('usuario').value;
        const descripcion = document.getElementById('descripcion').value;

        const fallo = {
            usuario: usuario,
            descripcion: descripcion,
            fechaReporte: new Date(),
            estado: 0, // 0 para Pendiente
            PosicionLatitud: userLocation.latitude,
            PosicionLongitud: userLocation.longitude
        };

        try {
            const response = await fetch('/fallas/PostFallo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(fallo)
            });

            const result = await response.json();
            document.getElementById('responseMessage').textContent = result.message;

            // Enviar notificación a través de SignalR
            connection.invoke("NuevoFalloReportado", "Nuevo fallo reportado").catch(err => console.error(err.toString()));

            // Limpiar el formulario
            document.getElementById('falloForm').reset();
        } catch (error) {
            console.error('Error:', error);
            document.getElementById('responseMessage').textContent = 'Error al enviar el reporte.';
        }
    });
    function onMapClick(e) {
        marker.setLatLng(e.latlng);
        userLocation = {
            latitude: e.latlng.lat,
            longitude: e.latlng.lng
        };
    }
    map.on('click', onMapClick);
    // Almacenamiento local
    function guardarEnLocalStorage(fallo) {
        let fallos = JSON.parse(localStorage.getItem('fallos')) || [];
        fallos.push(fallo);
        localStorage.setItem('fallos', JSON.stringify(fallos));
    }
    
    function cargarDeLocalStorage() {
        return JSON.parse(localStorage.getItem('fallos')) || [];
    }
</script>
}
