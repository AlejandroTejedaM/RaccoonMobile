@{
    ViewData["Title"] = "Dashboard de Logística";
}

<div class="container-fluid mt-4">
    <h2 class="mb-4">Dashboard de Logística - Raccoon Mobile</h2>

    <!-- Resumen de Estadísticas -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5 class="card-title">Fallos Pendientes</h5>
                    <h2 class="card-text" id="fallosPendientes">0</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">Fallos Atendidos</h5>
                    <h2 class="card-text" id="fallosAtendidos">0</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <h5 class="card-title">Fallos Cancelados</h5>
                    <h2 class="card-text" id="fallosCancelados">0</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Gráficos -->
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Estado de Fallos</h5>
                    <canvas id="estadosFallosChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Fallos por Día</h5>
                    <canvas id="fallosPorDiaChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tiempo de Respuesta Promedio (últimos 7 días)</h5>
                    <canvas id="tiempoPromedioRespuesta"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    let connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificacionesHub")
        .build();
    
    // Variables para almacenar los gráficos
    let estadosChart, fallosDiaChart, tiempoRespuestaChart;
    
    // Almacenamiento de datos
    let fallosData = {
        pendientes: [],
        atendidos: [],
        cancelados: [],
        fallosPorDia: {},
        tiempoRespuesta: []
    };

    // Inicializar gráficos
    function initCharts() {
        // Gráfico de Estados de Fallos (Pie Chart)
        const estadosChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Pendiente', 'Atendida', 'Cancelada'],
                datasets: [{
                    data: [0, 0, 0], // Se actualiza dinámicamente
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                return `${tooltipItem.label}: ${tooltipItem.raw}`;
                            }
                        }
                    }
                }
            }
        });

        // Gráfico de Fallos por Día (Line Chart)
        const fallosDiaCtx = document.getElementById('fallosPorDiaChart').getContext('2d');
        fallosDiaChart = new Chart(fallosDiaCtx, {
            type: 'line',
            data: {
                labels: [], // Fechas
                datasets: [{
                    label: 'Fallos Reportados',
                    data: [], // Número de fallos por día
                    borderColor: '#007bff',
                    fill: false
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Gráfico de Tiempo de Respuesta (Bar Chart)
        const tiempoRespuestaCtx = document.getElementById('tiempoRespuestaChart').getContext('2d');
        tiempoRespuestaChart = new Chart(tiempoRespuestaCtx, {
            type: 'bar',
            data: {
                labels: [], // Fechas
                datasets: [{
                    label: 'Tiempo Promedio (horas)',
                    data: [], // Tiempo promedio en horas
                    backgroundColor: '#17a2b8'
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });
    }

    // Procesar datos de la API
    function procesarFallos(fallos) {
        const fallosPorDia = {};
        const tiempoRespuesta = [];

        fallos.forEach(fallo => {
            const fechaReporte = fallo.fechaReporte.split('T')[0]; // Obtener solo la fecha
            const horasResolucion = (new Date(fallo.fechaResolucion) - new Date(fallo.fechaReporte)) / 36e5;

            // Contabilizar estados
            switch (fallo.estado) {
                case 0: fallosData.pendientes.push(fallo); break;
                case 1: fallosData.atendidos.push(fallo); break;
                case 2: fallosData.cancelados.push(fallo); break;
            }

            // Contabilizar fallos por día
            if (!fallosPorDia[fechaReporte]) fallosPorDia[fechaReporte] = 0;
            fallosPorDia[fechaReporte]++;

            // Registrar tiempos de respuesta
            tiempoRespuesta.push(horasResolucion);
        });

        fallosData.fallosPorDia = fallosPorDia;
        fallosData.tiempoRespuesta = tiempoRespuesta;
    }

    // Actualizar gráficos
    function actualizarGraficos() {
        // Actualizar Pie Chart
        estadosChart.data.datasets[0].data = [
            fallosData.pendientes.length,
            fallosData.atendidos.length,
            fallosData.cancelados.length
        ];
        estadosChart.update();

        // Actualizar Line Chart (Fallos por Día)
        const dias = Object.keys(fallosData.fallosPorDia);
        const fallosPorDia = Object.values(fallosData.fallosPorDia);
        fallosDiaChart.data.labels = dias;
        fallosDiaChart.data.datasets[0].data = fallosPorDia;
        fallosDiaChart.update();

        // Actualizar Bar Chart (Tiempo de Respuesta)
        const promedioRespuesta = fallosData.tiempoRespuesta.length
            ? (fallosData.tiempoRespuesta.reduce((a, b) => a + b) / fallosData.tiempoRespuesta.length).toFixed(2)
            : 0;
        tiempoRespuestaChart.data.labels = ['Promedio'];
        tiempoRespuestaChart.data.datasets[0].data = [promedioRespuesta];
        tiempoRespuestaChart.update();
    }
    
    function formatFecha(fecha) {
        const opciones = { year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(fecha).toLocaleDateString('es-MX', opciones);
    }

    fallosDiaChart.data.labels = Object.keys(fallosPorDia).map(formatFecha);

    // Actualizar dashboard con datos del API
    async function actualizarDashboard() {
        try {
            const response = await fetch('/fallas/GetFallos');
            const fallos = await response.json();

            // Procesar y guardar datos
            procesarFallos(fallos);

            // Actualizar contadores
            document.getElementById('fallosPendientes').textContent = fallosData.pendientes.length;
            document.getElementById('fallosAtendidos').textContent = fallosData.atendidos.length;
            document.getElementById('fallosCancelados').textContent = fallosData.cancelados.length;

            // Actualizar gráficos
            actualizarGraficos();
        } catch (error) {
            console.error('Error al actualizar dashboard:', error);
        }
    }

    // Conexión SignalR para actualizar en tiempo real
    connection.on("NuevoFalloReportado", () => actualizarDashboard());
    connection.on("FalloActualizado", () => actualizarDashboard());

    // Inicialización del dashboard
    document.addEventListener('DOMContentLoaded', async () => {
        await connection.start();
        initCharts();
        await actualizarDashboard();
    });
    </script>

}